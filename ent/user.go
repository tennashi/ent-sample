// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/tennashi/ent-sample/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Namespaces holds the value of the namespaces edge.
	Namespaces []*Namespace
	// OwnedNamespaces holds the value of the owned_namespaces edge.
	OwnedNamespaces []*Namespace
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// NamespacesOrErr returns the Namespaces value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NamespacesOrErr() ([]*Namespace, error) {
	if e.loadedTypes[0] {
		return e.Namespaces, nil
	}
	return nil, &NotLoadedError{edge: "namespaces"}
}

// OwnedNamespacesOrErr returns the OwnedNamespaces value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedNamespacesOrErr() ([]*Namespace, error) {
	if e.loadedTypes[1] {
		return e.OwnedNamespaces, nil
	}
	return nil, &NotLoadedError{edge: "owned_namespaces"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // id
		&sql.NullString{}, // name
		&sql.NullString{}, // avatar_url
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value.Valid {
		u.ID = value.String
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field avatar_url", values[1])
	} else if value.Valid {
		u.AvatarURL = value.String
	}
	return nil
}

// QueryNamespaces queries the namespaces edge of the User.
func (u *User) QueryNamespaces() *NamespaceQuery {
	return (&UserClient{config: u.config}).QueryNamespaces(u)
}

// QueryOwnedNamespaces queries the owned_namespaces edge of the User.
func (u *User) QueryOwnedNamespaces() *NamespaceQuery {
	return (&UserClient{config: u.config}).QueryOwnedNamespaces(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
