// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/tennashi/ent-sample/ent/namespace"
	"github.com/tennashi/ent-sample/ent/user"
)

// NamespaceCreate is the builder for creating a Namespace entity.
type NamespaceCreate struct {
	config
	mutation *NamespaceMutation
	hooks    []Hook
}

// SetName sets the name field.
func (nc *NamespaceCreate) SetName(s string) *NamespaceCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetID sets the id field.
func (nc *NamespaceCreate) SetID(s string) *NamespaceCreate {
	nc.mutation.SetID(s)
	return nc
}

// AddMemberIDs adds the members edge to User by ids.
func (nc *NamespaceCreate) AddMemberIDs(ids ...string) *NamespaceCreate {
	nc.mutation.AddMemberIDs(ids...)
	return nc
}

// AddMembers adds the members edges to User.
func (nc *NamespaceCreate) AddMembers(u ...*User) *NamespaceCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nc.AddMemberIDs(ids...)
}

// AddAdminIDs adds the admins edge to User by ids.
func (nc *NamespaceCreate) AddAdminIDs(ids ...string) *NamespaceCreate {
	nc.mutation.AddAdminIDs(ids...)
	return nc
}

// AddAdmins adds the admins edges to User.
func (nc *NamespaceCreate) AddAdmins(u ...*User) *NamespaceCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return nc.AddAdminIDs(ids...)
}

// Mutation returns the NamespaceMutation object of the builder.
func (nc *NamespaceCreate) Mutation() *NamespaceMutation {
	return nc.mutation
}

// Save creates the Namespace in the database.
func (nc *NamespaceCreate) Save(ctx context.Context) (*Namespace, error) {
	if err := nc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Namespace
	)
	if len(nc.hooks) == 0 {
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NamespaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			nc.mutation = mutation
			node, err = nc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NamespaceCreate) SaveX(ctx context.Context) *Namespace {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (nc *NamespaceCreate) preSave() error {
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if len(nc.mutation.AdminsIDs()) == 0 {
		return &ValidationError{Name: "admins", err: errors.New("ent: missing required edge \"admins\"")}
	}
	return nil
}

func (nc *NamespaceCreate) sqlSave(ctx context.Context) (*Namespace, error) {
	n, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return n, nil
}

func (nc *NamespaceCreate) createSpec() (*Namespace, *sqlgraph.CreateSpec) {
	var (
		n     = &Namespace{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: namespace.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: namespace.FieldID,
			},
		}
	)
	if id, ok := nc.mutation.ID(); ok {
		n.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: namespace.FieldName,
		})
		n.Name = value
	}
	if nodes := nc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.MembersTable,
			Columns: namespace.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   namespace.AdminsTable,
			Columns: namespace.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return n, _spec
}

// NamespaceCreateBulk is the builder for creating a bulk of Namespace entities.
type NamespaceCreateBulk struct {
	config
	builders []*NamespaceCreate
}

// Save creates the Namespace entities in the database.
func (ncb *NamespaceCreateBulk) Save(ctx context.Context) ([]*Namespace, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Namespace, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*NamespaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ncb *NamespaceCreateBulk) SaveX(ctx context.Context) []*Namespace {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
